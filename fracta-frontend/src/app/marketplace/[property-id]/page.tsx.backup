'use client';

import React, { useState, useMemo, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { 
  MapPin, 
  Building2, 
  Users, 
  DollarSign, 
  TrendingUp, 
  Calendar,
  ArrowLeft,
  ShoppingCart,
  Wallet,
  Percent,
  X
} from 'lucide-react';
import Header from '@/components/Header';
import { useAccount, useWriteContract, useWaitForTransactionReceipt, useChainId, useSwitchChain } from 'wagmi';
import { parseEther } from 'viem';
import { baseSepolia } from 'wagmi/chains';

interface Token {
  id: number;
  token_number: number;
  property_id: number;
  owner_id: number;
  mint_price: number;
  current_price?: number;
  is_for_sale: boolean;
  minted_at: string;
}

interface Property {
  id: string;
  name: string;
  location: string;
  jurisdiction: string;
  fullPrice: number;
  tokenPrice: number;
  totalTokens: number;
  expectedYield: number;
  image: string;
  status: string;
}

// Contract addresses
const PROPERTY_TOKEN_ADDRESS = '0xd312662Bd68743469dbFC9B819EA7c4Ba50aCB9b';

export default function PropertyDetailPage() {
  const params = useParams();
  const propertyId = params['property-id'] as string;
  const { address, isConnected } = useAccount();
  const chainId = useChainId();
  const { switchChain } = useSwitchChain();
  
  const [buyAmount, setBuyAmount] = useState(1);
  const [tokens, setTokens] = useState<Token[]>([]);
  const [tokensLoading, setTokensLoading] = useState(true);
  const [showBuyModal, setShowBuyModal] = useState(false);
  const [modalBuyAmount, setModalBuyAmount] = useState(1);
  const [isMinting, setIsMinting] = useState(false);
  const [ethPrice, setEthPrice] = useState<number | null>(null);
  const [ethPriceLoading, setEthPriceLoading] = useState(true);

  // Check if user is on correct network
  const isOnCorrectNetwork = chainId === baseSepolia.id;

  // Blockchain transaction hooks
  const { writeContract, data: hash, isPending, error } = useWriteContract();
  const { isLoading: isConfirming, isSuccess } = useWaitForTransactionReceipt({ hash });

  // Fetch current ETH price
  useEffect(() => {
    const fetchEthPrice = async () => {
      try {
        setEthPriceLoading(true);
        const response = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd');
        const data = await response.json();
        setEthPrice(data.ethereum.usd);
      } catch (error) {
        console.error('Failed to fetch ETH price:', error);
        setEthPrice(3770); // Fallback price
      } finally {
        setEthPriceLoading(false);
      }
    };

    fetchEthPrice();
  }, []);

  // Calculate ETH amount for $119 with buffer for price fluctuations
  const ethAmountPerToken = useMemo(() => {
    if (!ethPrice) return 0.0316; // Contract price is ~0.0316 ETH
    return 0.0316; // Use contract price directly
  }, [ethPrice]);

  // Handle transaction success
  useEffect(() => {
    if (isSuccess && hash) {
      alert(`Purchase successful! Hash: ${hash}`);
      setShowBuyModal(false);
      setIsMinting(false);
      // Refresh tokens
      window.location.reload();
    }
  }, [isSuccess, hash]);

  // Handle transaction error
  useEffect(() => {
    if (error) {
      console.error('=== TRANSACTION ERROR DETAILS ===');
      console.error('Error object:', error);
      console.error('Error name:', error.name);
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
      console.error('Error cause:', error.cause);
      console.error('Full error details:', JSON.stringify(error, null, 2));
      console.error('================================');
      
      // Provide more specific error messages
      let errorMessage = 'Transaction failed';
      
      if (error.message.includes('insufficient funds')) {
        errorMessage = 'Insufficient ETH balance. Please add more ETH to your wallet.';
      } else if (error.message.includes('user rejected')) {
        errorMessage = 'Transaction was rejected by user.';
      } else if (error.message.includes('gas')) {
        errorMessage = 'Gas estimation failed. Please try again.';
      } else if (error.message.includes('network')) {
        errorMessage = 'Network error. Please check your connection.';
      } else if (error.message.includes('execution reverted')) {
        errorMessage = 'Contract execution failed. The sale might not be active or other conditions not met.';
      } else {
        errorMessage = `Transaction failed: ${error.message}`;
      }
      
      alert(errorMessage);
      setIsMinting(false);
    }
  }, [error]);

  // Handle transaction rejection (user closes MetaMask)
  useEffect(() => {
    if (!isPending && !isConfirming && isMinting) {
      // If we were minting but transaction is no longer pending, user probably rejected
      setTimeout(() => {
        if (isMinting) {
          console.log('=== TRANSACTION TIMEOUT ===');
          console.log('Transaction was cancelled or rejected');
          console.log('Possible reasons:');
          console.log('- Sale not active on contract');
          console.log('- Insufficient ETH balance');
          console.log('- User rejected in MetaMask');
          console.log('- Contract conditions not met');
          console.log('==========================');
          
          setIsMinting(false);
          alert('Transaction was cancelled or rejected. Please try again.');
        }
      }, 15000); // Wait 15 seconds to see if transaction goes through
    }
  }, [isPending, isConfirming, isMinting]);

  // Reset minting state after 60 seconds if stuck
  useEffect(() => {
    if (isMinting) {
      const timeout = setTimeout(() => {
        console.log('=== TRANSACTION TIMEOUT AFTER 60 SECONDS ===');
        console.log('This could be due to:');
        console.log('- Network congestion on Base Sepolia');
        console.log('- Low gas price');
        console.log('- Contract execution taking too long');
        console.log('- MetaMask not responding');
        console.log('==========================================');
        
        setIsMinting(false);
        alert('Transaction timed out after 60 seconds. This might be due to network congestion. Please try again.');
      }, 60000); // Wait 60 seconds
      
      return () => clearTimeout(timeout);
    }
  }, [isMinting]);

  // Mock property data - always available
  const property: Property = {
    id: 'duna-studio',
    name: 'Duna Residences Studio',
    location: 'RoatÃ¡n, Prospera ZEDE',
    jurisdiction: 'prospera',
    fullPrice: 119000,
    tokenPrice: 119, // $119 per token
    totalTokens: 1000, // 1000 tokens total
    expectedYield: 8.5,
    image: '/images/dunaResidences/duna_studio_birdsView.png',
    status: 'live'
  };

  // Fetch tokens for this property
  useEffect(() => {
    const fetchTokens = async () => {
      try {
        setTokensLoading(true);
        // Use numeric property ID instead of string ID
        const numericPropertyId = property.id === 'duna-studio' ? 1 : parseInt(property.id);
        const response = await fetch(`http://localhost:8000/api/v1/transactions/tokens/${numericPropertyId}`);
        
        if (response.ok) {
          const tokensData = await response.json();
          setTokens(tokensData);
        } else {
          console.error('Failed to fetch tokens');
          setTokens([]);
        }
      } catch (error) {
        console.error('Error fetching tokens:', error);
        setTokens([]);
      } finally {
        setTokensLoading(false);
      }
    };

    fetchTokens();
  }, []); // Remove property dependency

  // Calculate floor price from tokens for sale
  const floorPrice = useMemo(() => {
    const tokensForSale = tokens.filter(t => t.is_for_sale && t.current_price);
    if (tokensForSale.length === 0) return null;
    
    const minPrice = Math.min(...tokensForSale.map(t => t.current_price!));
    return minPrice;
  }, [tokens]);

  // Check contract state before transaction
  const checkContractState = async () => {
    try {
      console.log('=== CHECKING CONTRACT STATE ===');
      
      // Check if sale is active
      const saleActiveResponse = await fetch(`http://localhost:8000/api/v1/blockchain/contract-state`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contract_address: PROPERTY_TOKEN_ADDRESS,
          function_name: 'saleActive',
          args: []
        })
      });
      
      if (saleActiveResponse.ok) {
        const saleActive = await saleActiveResponse.json();
        console.log('Sale active:', saleActive);
      }
      
      // Check token price
      const tokenPriceResponse = await fetch(`http://localhost:8000/api/v1/blockchain/contract-state`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contract_address: PROPERTY_TOKEN_ADDRESS,
          function_name: 'tokenPrice',
          args: []
        })
      });
      
      if (tokenPriceResponse.ok) {
        const tokenPrice = await tokenPriceResponse.json();
        console.log('Token price (wei):', tokenPrice);
        console.log('Token price (ETH):', tokenPrice / 1e18);
      }
      
      console.log('================================');
    } catch (error) {
      console.error('Error checking contract state:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-bg">
      {/* Global Header */}
      <Header />
      
      <div className="container mx-auto px-4 py-8">
        {/* Back Button */}
        <button 
          onClick={() => window.history.back()}
          className="flex items-center space-x-2 text-text-muted hover:text-text-primary mb-6 transition-colors"
        >
          <ArrowLeft className="h-4 w-4" />
          <span>Back to Marketplace</span>
        </button>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Property Image */}
          <div className="space-y-4">
            <div className="relative">
              <img
                src={property.image}
                alt={property.name}
                className="w-full h-96 object-cover rounded-lg"
              />
              <div className="absolute top-4 left-4">
                <span className="px-3 py-1 rounded-full text-xs font-medium bg-green-500/20 text-green-400">
                  Active Sale
                </span>
              </div>
            </div>

            {/* Property Details */}
            <div className="bg-gradient-card border border-white/5 rounded-lg p-6">
              <h2 className="text-2xl font-bold text-text-primary mb-4">{property.name}</h2>
              
              <div className="space-y-4">
                <div className="flex items-center space-x-2">
                  <MapPin className="h-4 w-4 text-text-muted" />
                  <span className="text-text-muted">{property.location}</span>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Building2 className="h-4 w-4 text-text-muted" />
                  <span className="text-text-muted">Jurisdiction: {property.jurisdiction}</span>
                </div>

                <div className="flex items-center space-x-2">
                  <TrendingUp className="h-4 w-4 text-text-muted" />
                  <span className="text-text-muted">Expected Yield: {property.expectedYield}%</span>
                </div>

                {/* Studio Specifications */}
                <div className="border-t border-white/10 pt-4">
                  <h3 className="text-lg font-semibold text-text-primary mb-3">Studio Specifications</h3>
                  <div className="grid grid-cols-1 gap-3">
                    <div className="flex items-center space-x-2">
                      <span className="text-text-muted">ð Size:</span>
                      <span className="text-text-primary font-medium">From 31mÂ²</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-text-muted">âï¸ Long-term stays:</span>
                      <span className="text-text-primary font-medium">Starting at $850/month</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-text-muted">ð Short-term stays:</span>
                      <span className="text-text-primary font-medium">Starting at $100/night</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-text-muted">ð° Ownership:</span>
                      <span className="text-text-primary font-medium">Starting at $120,000</span>
                    </div>
                  </div>
                </div>

                {/* About Duna Residences */}
                <div className="border-t border-white/10 pt-4">
                  <h3 className="text-lg font-semibold text-text-primary mb-3">About Duna Residences</h3>
                  <p className="text-text-muted text-sm leading-relaxed mb-3">
                    Duna Residences offers modern studio apartments in the heart of RoatÃ¡n, Honduras. 
                    This exclusive tower combines contemporary design with tropical luxury, featuring 
                    state-of-the-art amenities and stunning ocean views.
                  </p>
                  <p className="text-text-muted text-sm leading-relaxed">
                    Each studio apartment is thoughtfully designed to maximize space and comfort, 
                    featuring premium finishes, smart home technology, and access to world-class 
                    facilities including a rooftop pool and wellness center.
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Token Trading */}
          <div className="space-y-6">
            {/* Token Stats */}
            <div className="bg-gradient-card border border-white/5 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-text-primary mb-4">Token Information</h3>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <span className="text-sm text-text-muted">Entry Price</span>
                  <div className="text-xl font-bold text-accent-primary">${property.tokenPrice}</div>
                </div>
                
                <div>
                  <span className="text-sm text-text-muted">Floor Price</span>
                  <div className="text-xl font-bold text-green-400">
                    {floorPrice ? `$${floorPrice.toFixed(2)}` : '--'}
                  </div>
                </div>
                
                <div>
                  <span className="text-sm text-text-muted">Total Tokens</span>
                  <div className="text-xl font-bold text-text-primary">{property.totalTokens.toLocaleString()}</div>
                </div>
                
                <div>
                  <span className="text-sm text-text-muted">Minted Tokens</span>
                  <div className="text-xl font-bold text-green-400">{tokens.length}</div>
                </div>
              </div>

              {/* Progress Bar */}
              <div className="mt-4">
                <div className="flex justify-between text-sm text-text-muted mb-2">
                  <span>Progress</span>
                  <span>{((tokens.length / property.totalTokens) * 100).toFixed(1)}%</span>
                </div>
                <div className="w-full bg-white/10 rounded-full h-2">
                  <div 
                    className="bg-accent-primary h-2 rounded-full transition-all duration-300"
                    style={{ width: `${(tokens.length / property.totalTokens) * 100}%` }}
                  ></div>
                </div>
              </div>

              {/* Buy Now Button */}
              {property.status === 'live' && (
                <div className="mt-4 space-y-2">
                  <button 
                    onClick={() => setShowBuyModal(true)}
                    className="w-full py-3 px-4 bg-gradient-primary hover:shadow-button text-white rounded-lg font-semibold transition-all duration-300 ease-smooth transform hover:-translate-y-1 hover:shadow-glow border border-accent-primary/20"
                  >
                    Buy Now
                  </button>
                </div>
              )}
            </div>

            {/* Token Marketplace */}
            <div className="bg-gradient-card border border-white/5 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-text-primary mb-4">Token Marketplace</h3>
              
              {tokensLoading ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-accent-primary mx-auto"></div>
                  <p className="text-text-muted mt-2">Loading tokens...</p>
                </div>
              ) : tokens.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-text-muted">No tokens minted yet. Be the first to mint a token!</p>
                </div>
              ) : (
                <div className="grid grid-cols-4 gap-3 mb-4">
                  {tokens.slice(0, 8).map((token) => (
                    <div 
                      key={token.id}
                      onClick={() => window.location.href = `/marketplace/${propertyId}/token/${token.token_number}`}
                      className="cursor-pointer group"
                    >
                      <div className="relative bg-white/5 rounded-lg overflow-hidden">
                        <img 
                          src={property.image} 
                          alt={`Token #${token.token_number}`} 
                          className="w-full h-24 object-cover group-hover:scale-105 transition-transform duration-300"
                        />
                        <div className="absolute top-1 left-1 bg-black/50 text-white text-xs px-1 py-0.5 rounded">
                          #{token.token_number}
                        </div>
                        {token.is_for_sale && (
                          <div className="absolute top-1 right-1 bg-green-500/80 text-white text-xs px-1 py-0.5 rounded">
                            SALE
                          </div>
                        )}
                        <div className="p-2">
                          <div className="text-xs font-medium text-text-primary">Duna Studio #{token.token_number}</div>
                          <div className="text-xs text-text-muted">Owner: 0x{token.owner_id.toString().padStart(4, '0')}...</div>
                          <div className={`text-xs font-bold ${token.is_for_sale && token.current_price ? 'text-green-400' : 'text-accent-primary'}`}>
                            {token.is_for_sale && token.current_price ? `$${token.current_price.toFixed(2)}` : `$${token.mint_price.toFixed(2)}`}
                          </div>
                          <div className="text-xs text-text-muted">
                            {token.is_for_sale && token.current_price ? 
                              `${token.current_price > token.mint_price ? '+' : ''}${((token.current_price - token.mint_price) / token.mint_price * 100).toFixed(1)}%` : 
                              'Not for sale'
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              {tokens.length > 8 && (
                <button className="w-full py-2 px-4 bg-white/10 text-text-primary rounded-lg hover:bg-white/20 transition-colors text-sm">
                  View All {tokens.length} Tokens
                </button>
              )}
            </div>

            {/* Your Investment */}
            {/* balance > 0 && ( */}
              <div className="bg-gradient-card border border-white/5 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-text-primary mb-4">Your Investment</h3>
                
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-text-muted">Tokens Owned</span>
                    <span className="font-medium text-text-primary">{/* balance.toLocaleString() */}</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-text-muted">Ownership</span>
                    <span className="font-medium text-accent-primary">{/* ownershipPercentage.toFixed(2) */}%</span>
                  </div>
                  
                  <div className="flex justify-between">
                    <span className="text-text-muted">Total Value</span>
                    <span className="font-medium text-green-400">${/* totalInvestment.toLocaleString() */}</span>
                  </div>
                </div>
              </div>
            {/* ) */}

            {/* Buy Tokens */}
            {property.status === 'live' && (
              <div className="bg-gradient-card border border-white/5 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-text-primary mb-4">Buy Tokens</h3>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm text-text-muted mb-2">Number of Tokens</label>
                    <input
                      type="number"
                      min="1"
                      max="100"
                      value={buyAmount}
                      onChange={(e) => setBuyAmount(Math.max(1, parseInt(e.target.value) || 1))}
                      className="w-full px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary"
                    />
                  </div>
                  
                  <div className="flex justify-between text-sm">
                    <span className="text-text-muted">Total Cost</span>
                    <span className="font-medium text-accent-primary">${(buyAmount * property.tokenPrice).toLocaleString()}</span>
                  </div>
                  
                  <button className="w-full bg-gradient-to-r from-accent-primary to-accent-secondary text-white py-3 px-4 rounded-lg font-medium hover:opacity-90 transition-opacity flex items-center justify-center space-x-2">
                    <ShoppingCart className="h-4 w-4" />
                    <span>Buy Tokens</span>
                  </button>
                </div>
              </div>
            )}

            {/* KYC Status */}
            <div className="bg-gradient-card border border-white/5 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-text-primary mb-4">KYC Status</h3>
              
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <Wallet className="h-4 w-4 text-text-muted" />
                  <span className="text-text-muted">Required: prospera-permit</span>
                </div>
                
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 rounded-full bg-green-400"></div>
                  <span className="text-green-400">
                    KYC Verified
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Buy Modal */}
      {showBuyModal && (
        <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50">
          <div className="bg-gray-900 border border-white/20 rounded-lg p-6 w-full max-w-md mx-4 shadow-2xl">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold text-text-primary">Buy Tokens</h3>
              <button 
                onClick={() => setShowBuyModal(false)}
                className="text-text-muted hover:text-text-primary"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
            
            <div className="space-y-4">
              {/* Transaction Status */}
              {(isMinting || isPending || isConfirming) && (
                <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-400"></div>
                    <span className="text-sm text-blue-400 font-medium">
                      {isMinting ? 'Preparing Purchase...' : 
                       isPending ? 'Waiting for MetaMask...' : 
                       isConfirming ? 'Confirming on Blockchain...' : 'Processing...'}
                    </span>
                  </div>
                  {hash && (
                    <p className="text-xs text-blue-300 mt-1">
                      Hash: {hash.slice(0, 10)}...{hash.slice(-8)}
                    </p>
                  )}
                </div>
              )}

              {/* Wallet Status */}
              <div className="bg-white/5 rounded-lg p-3">
                <div className="flex items-center space-x-2">
                  <Wallet className="h-4 w-4 text-text-muted" />
                  <span className="text-sm text-text-muted">Wallet Status:</span>
                  <span className={`text-sm font-medium ${isConnected ? 'text-green-400' : 'text-red-400'}`}>
                    {isConnected ? 'Connected' : 'Not Connected'}
                  </span>
                </div>
                {isConnected && address && (
                  <div className="text-xs text-text-muted mt-1">
                    {address.slice(0, 6)}...{address.slice(-4)}
                  </div>
                )}
                
                {/* Network Status */}
                <div className="mt-2 pt-2 border-t border-white/10">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-text-muted">Network:</span>
                      <span className={`text-sm font-medium ${isOnCorrectNetwork ? 'text-green-400' : 'text-red-400'}`}>
                        {isOnCorrectNetwork ? 'Base Sepolia' : 'Wrong Network'}
                      </span>
                    </div>
                    {isConnected && !isOnCorrectNetwork && (
                      <button
                        onClick={() => switchChain({ chainId: baseSepolia.id })}
                        className="text-xs bg-accent-primary text-white px-2 py-1 rounded hover:opacity-90 transition-opacity"
                      >
                        Switch Network
                      </button>
                    )}
                  </div>
                  {!isOnCorrectNetwork && (
                    <p className="text-xs text-text-muted mt-1">
                      Please switch to Base Sepolia to mint tokens
                    </p>
                  )}
                  {isOnCorrectNetwork && (
                    <p className="text-xs text-text-muted mt-1">
                      Need Base Sepolia ETH? Get it from <a href="https://bridge.base.org/" target="_blank" rel="noopener noreferrer" className="text-accent-primary hover:underline">Base Bridge</a>
                    </p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm text-text-muted mb-2">Number of Tokens</label>
                <div className="flex items-center space-x-3">
                  <button
                    onClick={() => setModalBuyAmount(Math.max(1, modalBuyAmount - 1))}
                    disabled={modalBuyAmount <= 1}
                    className="w-10 h-10 bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg flex items-center justify-center text-text-primary font-bold text-lg"
                  >
                    -
                  </button>
                  <input
                    type="number"
                    min="1"
                    max="10"
                    value={modalBuyAmount}
                    onChange={(e) => setModalBuyAmount(Math.max(1, Math.min(10, parseInt(e.target.value) || 1)))}
                    className="flex-1 px-4 py-2 bg-white/5 border border-white/10 rounded-lg text-text-primary focus:outline-none focus:ring-2 focus:ring-accent-primary text-center font-semibold text-lg"
                  />
                  <button
                    onClick={() => setModalBuyAmount(Math.min(10, modalBuyAmount + 1))}
                    disabled={modalBuyAmount >= 10}
                    className="w-10 h-10 bg-white/10 hover:bg-white/20 disabled:opacity-50 disabled:cursor-not-allowed rounded-lg flex items-center justify-center text-text-primary font-bold text-lg"
                  >
                    +
                  </button>
                </div>
                <p className="text-xs text-text-muted mt-1 text-center">Max 10 tokens per transaction</p>
              </div>
              
              <div className="bg-white/5 rounded-lg p-3">
                <div className="flex justify-between text-sm mb-2">
                  <span className="text-text-muted">Price per token</span>
                  <span className="text-text-primary">
                    ${property.tokenPrice} 
                    {ethPriceLoading ? (
                      <span className="text-text-muted">(loading ETH price...)</span>
                    ) : (
                      <span className="text-text-muted">(â {ethAmountPerToken.toFixed(0)} ETH)</span>
                    )}
                  </span>
                </div>
                <div className="flex justify-between text-sm mb-2">
                  <span className="text-text-muted">Quantity</span>
                  <span className="text-text-primary">{modalBuyAmount}</span>
                </div>
                <div className="border-t border-white/10 pt-2">
                  <div className="flex justify-between font-semibold">
                    <span className="text-text-primary">Total</span>
                    <span className="text-accent-primary">
                      ${(modalBuyAmount * property.tokenPrice).toLocaleString()}
                      {!ethPriceLoading && (
                        <span className="text-text-muted"> (â {(modalBuyAmount * ethAmountPerToken).toFixed(0)} ETH)</span>
                      )}
                    </span>
                  </div>
                  <p className="text-xs text-text-muted mt-1 text-center">1000 tokens available for minting</p>
                  <p className="text-xs text-blue-400 mt-1 text-center">+5% buffer added for price stability</p>
                </div>
              </div>
              
              <div className="flex space-x-3">
                <button 
                  onClick={() => setShowBuyModal(false)}
                  className="flex-1 py-2 px-4 bg-white/10 text-text-primary rounded-lg hover:bg-white/20 transition-colors"
                >
                  Cancel
                </button>
                <button 
                  onClick={async () => {
                    try {
                      if (!isConnected) {
                        alert('Please connect your wallet first');
                        return;
                      }

                      if (!isOnCorrectNetwork) {
                        alert('Please switch to Base Sepolia network first');
                        return;
                      }

                      console.log('=== TRANSACTION PREPARATION ===');
                      console.log('Token amount:', modalBuyAmount);
                      console.log('ETH amount per token:', ethAmountPerToken);
                      console.log('Total ETH value:', modalBuyAmount * ethAmountPerToken);
                      console.log('Contract address:', PROPERTY_TOKEN_ADDRESS);
                      console.log('Network:', chainId);
                      console.log('Wallet address:', address);
                      console.log('Is connected:', isConnected);
                      console.log('Is on correct network:', isOnCorrectNetwork);
                      console.log('================================');
                      
                      console.log('â ï¸  IMPORTANT: The sale might not be active on the contract.');
                      console.log('If the transaction fails, the contract owner needs to call startSale().');
                      console.log('This is a common issue with newly deployed contracts.');
                      
                      setIsMinting(true);
                      
                      // Call the blockchain contract to purchase tokens
                      writeContract({
                        address: PROPERTY_TOKEN_ADDRESS as `0x${string}`,
                        abi: [
                          {
                            "inputs": [
                              {
                                "internalType": "uint256",
                                "name": "_tokenAmount",
                                "type": "uint256"
                              }
                            ],
                            "name": "purchaseTokens",
                            "outputs": [],
                            "stateMutability": "payable",
                            "type": "function"
                          }
                        ],
                        functionName: 'purchaseTokens',
                        args: [BigInt(modalBuyAmount)],
                        value: parseEther((modalBuyAmount * ethAmountPerToken).toString()),
                        gas: BigInt(300000) // Set explicit gas limit
                      });
                      
                    } catch (error) {
                      console.error('Minting error:', error);
                      alert(`Failed to mint tokens: ${error instanceof Error ? error.message : 'Unknown error'}`);
                      setIsMinting(false);
                    }
                  }}
                  disabled={isMinting || isPending || isConfirming || !isConnected || ethPriceLoading || !isOnCorrectNetwork}
                  className="flex-1 py-2 px-4 bg-gradient-primary text-white rounded-lg font-semibold hover:opacity-90 transition-opacity disabled:opacity-50"
                >
                  {isMinting || isPending ? 'Preparing Purchase...' : 
                   isConfirming ? 'Confirming Transaction...' : 
                   !isConnected ? 'Connect Wallet' : 
                   !isOnCorrectNetwork ? 'Switch to Base Sepolia' :
                   ethPriceLoading ? 'Loading ETH Price...' : 'Buy Tokens'}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    );
  }