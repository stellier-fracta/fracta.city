/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PropertyToken {
  export type PropertyInfoStruct = {
    propertyName: string;
    location: string;
    jurisdiction: string;
    totalPropertyValue: BigNumberish;
    totalTokens: BigNumberish;
    propertyType: string;
    squareFeet: BigNumberish;
    expectedYield: BigNumberish;
    imageURI: string;
    isActive: boolean;
  };

  export type PropertyInfoStructOutput = [
    propertyName: string,
    location: string,
    jurisdiction: string,
    totalPropertyValue: bigint,
    totalTokens: bigint,
    propertyType: string,
    squareFeet: bigint,
    expectedYield: bigint,
    imageURI: string,
    isActive: boolean
  ] & {
    propertyName: string;
    location: string;
    jurisdiction: string;
    totalPropertyValue: bigint;
    totalTokens: bigint;
    propertyType: string;
    squareFeet: bigint;
    expectedYield: bigint;
    imageURI: string;
    isActive: boolean;
  };
}

export interface PropertyTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FAILURE_JURISDICTION"
      | "FAILURE_KYC"
      | "FAILURE_NON_WHITELIST"
      | "FAILURE_PAUSED"
      | "SUCCESS_CODE"
      | "allowance"
      | "approve"
      | "authorizedTransfers"
      | "balanceOf"
      | "claimDividends"
      | "complianceManager"
      | "decimals"
      | "decreaseAllowance"
      | "detectTransferRestriction"
      | "distributeDividends"
      | "dividendsClaimed"
      | "dividendsEarned"
      | "endSale"
      | "errorMessages"
      | "getDividendInfo"
      | "getPropertyInfo"
      | "getSaleInfo"
      | "increaseAllowance"
      | "messageForTransferRestriction"
      | "name"
      | "owner"
      | "pause"
      | "paused"
      | "property"
      | "purchaseTokens"
      | "renounceOwnership"
      | "saleActive"
      | "saleEndTime"
      | "saleStartTime"
      | "setAuthorizedTransfer"
      | "startSale"
      | "symbol"
      | "tokenPrice"
      | "tokensSold"
      | "totalDividendsDistributed"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
      | "updatePropertyInfo"
      | "updateTokenPrice"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "DividendClaimed"
      | "DividendDistributed"
      | "OwnershipTransferred"
      | "Paused"
      | "PropertyInfoUpdated"
      | "PropertyTokensIssued"
      | "SaleStatusChanged"
      | "Transfer"
      | "TransferRestricted"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FAILURE_JURISDICTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FAILURE_KYC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FAILURE_NON_WHITELIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FAILURE_PAUSED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUCCESS_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedTransfers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "complianceManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "detectTransferRestriction",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dividendsClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendsEarned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "endSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "errorMessages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDividendInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPropertyInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messageForTransferRestriction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "property", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedTransfer",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDividendsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePropertyInfo",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FAILURE_JURISDICTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FAILURE_KYC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FAILURE_NON_WHITELIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FAILURE_PAUSED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUCCESS_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedTransfers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "complianceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "detectTransferRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "errorMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDividendInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPropertyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageForTransferRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "property", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokensSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDividendsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePropertyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendClaimedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DividendDistributedEvent {
  export type InputTuple = [totalAmount: BigNumberish, perToken: BigNumberish];
  export type OutputTuple = [totalAmount: bigint, perToken: bigint];
  export interface OutputObject {
    totalAmount: bigint;
    perToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyInfoUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyTokensIssuedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [to: string, amount: bigint, price: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleStatusChangedEvent {
  export type InputTuple = [active: boolean];
  export type OutputTuple = [active: boolean];
  export interface OutputObject {
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferRestrictedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PropertyToken extends BaseContract {
  connect(runner?: ContractRunner | null): PropertyToken;
  waitForDeployment(): Promise<this>;

  interface: PropertyTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FAILURE_JURISDICTION: TypedContractMethod<[], [bigint], "view">;

  FAILURE_KYC: TypedContractMethod<[], [bigint], "view">;

  FAILURE_NON_WHITELIST: TypedContractMethod<[], [bigint], "view">;

  FAILURE_PAUSED: TypedContractMethod<[], [bigint], "view">;

  SUCCESS_CODE: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  authorizedTransfers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimDividends: TypedContractMethod<[], [void], "nonpayable">;

  complianceManager: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  detectTransferRestriction: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  distributeDividends: TypedContractMethod<[], [void], "payable">;

  dividendsClaimed: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  dividendsEarned: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  endSale: TypedContractMethod<[], [void], "nonpayable">;

  errorMessages: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getDividendInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalEarned: bigint;
        claimed: bigint;
        claimable: bigint;
      }
    ],
    "view"
  >;

  getPropertyInfo: TypedContractMethod<
    [],
    [PropertyToken.PropertyInfoStructOutput],
    "view"
  >;

  getSaleInfo: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        _tokenPrice: bigint;
        _tokensSold: bigint;
        _tokensRemaining: bigint;
        _saleStartTime: bigint;
        _saleEndTime: bigint;
        _saleActive: boolean;
      }
    ],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  messageForTransferRestriction: TypedContractMethod<
    [restrictionCode: BigNumberish],
    [string],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  property: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        propertyName: string;
        location: string;
        jurisdiction: string;
        totalPropertyValue: bigint;
        totalTokens: bigint;
        propertyType: string;
        squareFeet: bigint;
        expectedYield: bigint;
        imageURI: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  purchaseTokens: TypedContractMethod<
    [_tokenAmount: BigNumberish],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  saleActive: TypedContractMethod<[], [boolean], "view">;

  saleEndTime: TypedContractMethod<[], [bigint], "view">;

  saleStartTime: TypedContractMethod<[], [bigint], "view">;

  setAuthorizedTransfer: TypedContractMethod<
    [_address: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;

  startSale: TypedContractMethod<
    [_duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenPrice: TypedContractMethod<[], [bigint], "view">;

  tokensSold: TypedContractMethod<[], [bigint], "view">;

  totalDividendsDistributed: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePropertyInfo: TypedContractMethod<
    [
      _propertyType: string,
      _squareFeet: BigNumberish,
      _expectedYield: BigNumberish,
      _imageURI: string
    ],
    [void],
    "nonpayable"
  >;

  updateTokenPrice: TypedContractMethod<
    [_newPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FAILURE_JURISDICTION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FAILURE_KYC"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FAILURE_NON_WHITELIST"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FAILURE_PAUSED"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUCCESS_CODE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedTransfers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimDividends"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "complianceManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "detectTransferRestriction"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributeDividends"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "dividendsClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dividendsEarned"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "endSale"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "errorMessages"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDividendInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalEarned: bigint;
        claimed: bigint;
        claimable: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPropertyInfo"
  ): TypedContractMethod<[], [PropertyToken.PropertyInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSaleInfo"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        _tokenPrice: bigint;
        _tokensSold: bigint;
        _tokensRemaining: bigint;
        _saleStartTime: bigint;
        _saleEndTime: bigint;
        _saleActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "messageForTransferRestriction"
  ): TypedContractMethod<[restrictionCode: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "property"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        string,
        boolean
      ] & {
        propertyName: string;
        location: string;
        jurisdiction: string;
        totalPropertyValue: bigint;
        totalTokens: bigint;
        propertyType: string;
        squareFeet: bigint;
        expectedYield: bigint;
        imageURI: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseTokens"
  ): TypedContractMethod<[_tokenAmount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saleActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "saleEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "saleStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAuthorizedTransfer"
  ): TypedContractMethod<
    [_address: AddressLike, _authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startSale"
  ): TypedContractMethod<[_duration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokensSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDividendsDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePropertyInfo"
  ): TypedContractMethod<
    [
      _propertyType: string,
      _squareFeet: BigNumberish,
      _expectedYield: BigNumberish,
      _imageURI: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenPrice"
  ): TypedContractMethod<[_newPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "DividendClaimed"
  ): TypedContractEvent<
    DividendClaimedEvent.InputTuple,
    DividendClaimedEvent.OutputTuple,
    DividendClaimedEvent.OutputObject
  >;
  getEvent(
    key: "DividendDistributed"
  ): TypedContractEvent<
    DividendDistributedEvent.InputTuple,
    DividendDistributedEvent.OutputTuple,
    DividendDistributedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyInfoUpdated"
  ): TypedContractEvent<
    PropertyInfoUpdatedEvent.InputTuple,
    PropertyInfoUpdatedEvent.OutputTuple,
    PropertyInfoUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyTokensIssued"
  ): TypedContractEvent<
    PropertyTokensIssuedEvent.InputTuple,
    PropertyTokensIssuedEvent.OutputTuple,
    PropertyTokensIssuedEvent.OutputObject
  >;
  getEvent(
    key: "SaleStatusChanged"
  ): TypedContractEvent<
    SaleStatusChangedEvent.InputTuple,
    SaleStatusChangedEvent.OutputTuple,
    SaleStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferRestricted"
  ): TypedContractEvent<
    TransferRestrictedEvent.InputTuple,
    TransferRestrictedEvent.OutputTuple,
    TransferRestrictedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "DividendClaimed(address,uint256)": TypedContractEvent<
      DividendClaimedEvent.InputTuple,
      DividendClaimedEvent.OutputTuple,
      DividendClaimedEvent.OutputObject
    >;
    DividendClaimed: TypedContractEvent<
      DividendClaimedEvent.InputTuple,
      DividendClaimedEvent.OutputTuple,
      DividendClaimedEvent.OutputObject
    >;

    "DividendDistributed(uint256,uint256)": TypedContractEvent<
      DividendDistributedEvent.InputTuple,
      DividendDistributedEvent.OutputTuple,
      DividendDistributedEvent.OutputObject
    >;
    DividendDistributed: TypedContractEvent<
      DividendDistributedEvent.InputTuple,
      DividendDistributedEvent.OutputTuple,
      DividendDistributedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PropertyInfoUpdated()": TypedContractEvent<
      PropertyInfoUpdatedEvent.InputTuple,
      PropertyInfoUpdatedEvent.OutputTuple,
      PropertyInfoUpdatedEvent.OutputObject
    >;
    PropertyInfoUpdated: TypedContractEvent<
      PropertyInfoUpdatedEvent.InputTuple,
      PropertyInfoUpdatedEvent.OutputTuple,
      PropertyInfoUpdatedEvent.OutputObject
    >;

    "PropertyTokensIssued(address,uint256,uint256)": TypedContractEvent<
      PropertyTokensIssuedEvent.InputTuple,
      PropertyTokensIssuedEvent.OutputTuple,
      PropertyTokensIssuedEvent.OutputObject
    >;
    PropertyTokensIssued: TypedContractEvent<
      PropertyTokensIssuedEvent.InputTuple,
      PropertyTokensIssuedEvent.OutputTuple,
      PropertyTokensIssuedEvent.OutputObject
    >;

    "SaleStatusChanged(bool)": TypedContractEvent<
      SaleStatusChangedEvent.InputTuple,
      SaleStatusChangedEvent.OutputTuple,
      SaleStatusChangedEvent.OutputObject
    >;
    SaleStatusChanged: TypedContractEvent<
      SaleStatusChangedEvent.InputTuple,
      SaleStatusChangedEvent.OutputTuple,
      SaleStatusChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferRestricted(address,address,uint256,string)": TypedContractEvent<
      TransferRestrictedEvent.InputTuple,
      TransferRestrictedEvent.OutputTuple,
      TransferRestrictedEvent.OutputObject
    >;
    TransferRestricted: TypedContractEvent<
      TransferRestrictedEvent.InputTuple,
      TransferRestrictedEvent.OutputTuple,
      TransferRestrictedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
