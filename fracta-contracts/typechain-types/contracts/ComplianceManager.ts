/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ComplianceManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveKYC"
      | "canInvest"
      | "canTransfer"
      | "getUserComplianceStatus"
      | "internationalProperties"
      | "kycApproved"
      | "kycExpiry"
      | "kycJurisdiction"
      | "maxInvestmentPerProperty"
      | "owner"
      | "paused"
      | "prosperaPermitId"
      | "prosperaPermitValid"
      | "prosperaProperties"
      | "recordInvestment"
      | "registerProspectsPermit"
      | "renounceOwnership"
      | "setPropertyJurisdiction"
      | "transferOwnership"
      | "userInvestments"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "KYCApproved"
      | "KYCRevoked"
      | "OwnershipTransferred"
      | "Paused"
      | "PropertyJurisdictionSet"
      | "ProspectsPermitRegistered"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveKYC",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canInvest",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canTransfer",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserComplianceStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "internationalProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kycApproved",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kycExpiry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kycJurisdiction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxInvestmentPerProperty",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prosperaPermitId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prosperaPermitValid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prosperaProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordInvestment",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProspectsPermit",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPropertyJurisdiction",
    values: [AddressLike, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInvestments",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approveKYC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canInvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserComplianceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internationalProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kycApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kycJurisdiction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxInvestmentPerProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prosperaPermitId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prosperaPermitValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prosperaProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordInvestment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProspectsPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPropertyJurisdiction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInvestments",
    data: BytesLike
  ): Result;
}

export namespace KYCApprovedEvent {
  export type InputTuple = [user: AddressLike, jurisdiction: string];
  export type OutputTuple = [user: string, jurisdiction: string];
  export interface OutputObject {
    user: string;
    jurisdiction: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KYCRevokedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PropertyJurisdictionSetEvent {
  export type InputTuple = [
    property: AddressLike,
    requiresProspera: boolean,
    allowsInternational: boolean
  ];
  export type OutputTuple = [
    property: string,
    requiresProspera: boolean,
    allowsInternational: boolean
  ];
  export interface OutputObject {
    property: string;
    requiresProspera: boolean;
    allowsInternational: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProspectsPermitRegisteredEvent {
  export type InputTuple = [user: AddressLike, permitId: string];
  export type OutputTuple = [user: string, permitId: string];
  export interface OutputObject {
    user: string;
    permitId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComplianceManager extends BaseContract {
  connect(runner?: ContractRunner | null): ComplianceManager;
  waitForDeployment(): Promise<this>;

  interface: ComplianceManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveKYC: TypedContractMethod<
    [user: AddressLike, jurisdiction: string, expiryTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  canInvest: TypedContractMethod<
    [user: AddressLike, property: AddressLike, amount: BigNumberish],
    [[boolean, string]],
    "view"
  >;

  canTransfer: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      property: AddressLike,
      amount: BigNumberish
    ],
    [[boolean, string]],
    "view"
  >;

  getUserComplianceStatus: TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, string, bigint, boolean, string] & {
        kycValid: boolean;
        jurisdiction: string;
        expiry: bigint;
        hasProspectsPermit: boolean;
        permitId: string;
      }
    ],
    "view"
  >;

  internationalProperties: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  kycApproved: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  kycExpiry: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  kycJurisdiction: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  maxInvestmentPerProperty: TypedContractMethod<
    [arg0: string],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  prosperaPermitId: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  prosperaPermitValid: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  prosperaProperties: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  recordInvestment: TypedContractMethod<
    [user: AddressLike, property: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerProspectsPermit: TypedContractMethod<
    [user: AddressLike, permitId: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPropertyJurisdiction: TypedContractMethod<
    [
      property: AddressLike,
      requiresProspera: boolean,
      allowsInternational: boolean
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userInvestments: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveKYC"
  ): TypedContractMethod<
    [user: AddressLike, jurisdiction: string, expiryTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canInvest"
  ): TypedContractMethod<
    [user: AddressLike, property: AddressLike, amount: BigNumberish],
    [[boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "canTransfer"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      property: AddressLike,
      amount: BigNumberish
    ],
    [[boolean, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserComplianceStatus"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [boolean, string, bigint, boolean, string] & {
        kycValid: boolean;
        jurisdiction: string;
        expiry: bigint;
        hasProspectsPermit: boolean;
        permitId: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "internationalProperties"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "kycApproved"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "kycExpiry"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "kycJurisdiction"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "maxInvestmentPerProperty"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "prosperaPermitId"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "prosperaPermitValid"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "prosperaProperties"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordInvestment"
  ): TypedContractMethod<
    [user: AddressLike, property: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProspectsPermit"
  ): TypedContractMethod<
    [user: AddressLike, permitId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPropertyJurisdiction"
  ): TypedContractMethod<
    [
      property: AddressLike,
      requiresProspera: boolean,
      allowsInternational: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInvestments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "KYCApproved"
  ): TypedContractEvent<
    KYCApprovedEvent.InputTuple,
    KYCApprovedEvent.OutputTuple,
    KYCApprovedEvent.OutputObject
  >;
  getEvent(
    key: "KYCRevoked"
  ): TypedContractEvent<
    KYCRevokedEvent.InputTuple,
    KYCRevokedEvent.OutputTuple,
    KYCRevokedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PropertyJurisdictionSet"
  ): TypedContractEvent<
    PropertyJurisdictionSetEvent.InputTuple,
    PropertyJurisdictionSetEvent.OutputTuple,
    PropertyJurisdictionSetEvent.OutputObject
  >;
  getEvent(
    key: "ProspectsPermitRegistered"
  ): TypedContractEvent<
    ProspectsPermitRegisteredEvent.InputTuple,
    ProspectsPermitRegisteredEvent.OutputTuple,
    ProspectsPermitRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "KYCApproved(address,string)": TypedContractEvent<
      KYCApprovedEvent.InputTuple,
      KYCApprovedEvent.OutputTuple,
      KYCApprovedEvent.OutputObject
    >;
    KYCApproved: TypedContractEvent<
      KYCApprovedEvent.InputTuple,
      KYCApprovedEvent.OutputTuple,
      KYCApprovedEvent.OutputObject
    >;

    "KYCRevoked(address)": TypedContractEvent<
      KYCRevokedEvent.InputTuple,
      KYCRevokedEvent.OutputTuple,
      KYCRevokedEvent.OutputObject
    >;
    KYCRevoked: TypedContractEvent<
      KYCRevokedEvent.InputTuple,
      KYCRevokedEvent.OutputTuple,
      KYCRevokedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PropertyJurisdictionSet(address,bool,bool)": TypedContractEvent<
      PropertyJurisdictionSetEvent.InputTuple,
      PropertyJurisdictionSetEvent.OutputTuple,
      PropertyJurisdictionSetEvent.OutputObject
    >;
    PropertyJurisdictionSet: TypedContractEvent<
      PropertyJurisdictionSetEvent.InputTuple,
      PropertyJurisdictionSetEvent.OutputTuple,
      PropertyJurisdictionSetEvent.OutputObject
    >;

    "ProspectsPermitRegistered(address,string)": TypedContractEvent<
      ProspectsPermitRegisteredEvent.InputTuple,
      ProspectsPermitRegisteredEvent.OutputTuple,
      ProspectsPermitRegisteredEvent.OutputObject
    >;
    ProspectsPermitRegistered: TypedContractEvent<
      ProspectsPermitRegisteredEvent.InputTuple,
      ProspectsPermitRegisteredEvent.OutputTuple,
      ProspectsPermitRegisteredEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
